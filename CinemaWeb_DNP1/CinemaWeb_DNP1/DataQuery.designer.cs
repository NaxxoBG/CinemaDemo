#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CinemaWeb_DNP1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cinemaDB")]
	public partial class DataQueryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertscreening(screening instance);
    partial void Updatescreening(screening instance);
    partial void Deletescreening(screening instance);
    partial void Insertseat(seat instance);
    partial void Updateseat(seat instance);
    partial void Deleteseat(seat instance);
    partial void Insertticket(ticket instance);
    partial void Updateticket(ticket instance);
    partial void Deleteticket(ticket instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertpreset(preset instance);
    partial void Updatepreset(preset instance);
    partial void Deletepreset(preset instance);
    partial void Insertmovie(movie instance);
    partial void Updatemovie(movie instance);
    partial void Deletemovie(movie instance);
    #endregion
		
		public DataQueryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["cinemaDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataQueryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataQueryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataQueryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataQueryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<screening> screenings
		{
			get
			{
				return this.GetTable<screening>();
			}
		}
		
		public System.Data.Linq.Table<seat> seats
		{
			get
			{
				return this.GetTable<seat>();
			}
		}
		
		public System.Data.Linq.Table<ticket> tickets
		{
			get
			{
				return this.GetTable<ticket>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<preset> presets
		{
			get
			{
				return this.GetTable<preset>();
			}
		}
		
		public System.Data.Linq.Table<movie> movies
		{
			get
			{
				return this.GetTable<movie>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.screening")]
	public partial class screening : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _screening_id;
		
		private int _movie_id;
		
		private System.DateTime _start;
		
		private EntitySet<ticket> _tickets;
		
		private EntityRef<movie> _movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onscreening_idChanging(int value);
    partial void Onscreening_idChanged();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void OnstartChanging(System.DateTime value);
    partial void OnstartChanged();
    #endregion
		
		public screening()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			this._movie = default(EntityRef<movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screening_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int screening_id
		{
			get
			{
				return this._screening_id;
			}
			set
			{
				if ((this._screening_id != value))
				{
					this.Onscreening_idChanging(value);
					this.SendPropertyChanging();
					this._screening_id = value;
					this.SendPropertyChanged("screening_id");
					this.Onscreening_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movie_id", DbType="Int NOT NULL")]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					if (this._movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start", DbType="DateTime NOT NULL")]
		public System.DateTime start
		{
			get
			{
				return this._start;
			}
			set
			{
				if ((this._start != value))
				{
					this.OnstartChanging(value);
					this.SendPropertyChanging();
					this._start = value;
					this.SendPropertyChanged("start");
					this.OnstartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="screening_ticket", Storage="_tickets", ThisKey="screening_id", OtherKey="screen_id")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie1_screening", Storage="_movie", ThisKey="movie_id", OtherKey="movie_id", IsForeignKey=true)]
		public movie movie
		{
			get
			{
				return this._movie.Entity;
			}
			set
			{
				movie previousValue = this._movie.Entity;
				if (((previousValue != value) 
							|| (this._movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movie.Entity = null;
						previousValue.screenings.Remove(this);
					}
					this._movie.Entity = value;
					if ((value != null))
					{
						value.screenings.Add(this);
						this._movie_id = value.movie_id;
					}
					else
					{
						this._movie_id = default(int);
					}
					this.SendPropertyChanged("movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.screening = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.screening = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.seat")]
	public partial class seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _seat_id;
		
		private char _row;
		
		private int _number;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onseat_idChanging(int value);
    partial void Onseat_idChanged();
    partial void OnrowChanging(char value);
    partial void OnrowChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    #endregion
		
		public seat()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_row", DbType="Char(1) NOT NULL")]
		public char row
		{
			get
			{
				return this._row;
			}
			set
			{
				if ((this._row != value))
				{
					this.OnrowChanging(value);
					this.SendPropertyChanging();
					this._row = value;
					this.SendPropertyChanged("row");
					this.OnrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seat_ticket", Storage="_tickets", ThisKey="seat_id", OtherKey="seat_id")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.seat = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket")]
	public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ticket_id;
		
		private int _screen_id;
		
		private int _seat_id;
		
		private int _user_id;
		
		private EntityRef<screening> _screening;
		
		private EntityRef<seat> _seat;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onticket_idChanging(int value);
    partial void Onticket_idChanged();
    partial void Onscreen_idChanging(int value);
    partial void Onscreen_idChanged();
    partial void Onseat_idChanging(int value);
    partial void Onseat_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public ticket()
		{
			this._screening = default(EntityRef<screening>);
			this._seat = default(EntityRef<seat>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ticket_id
		{
			get
			{
				return this._ticket_id;
			}
			set
			{
				if ((this._ticket_id != value))
				{
					this.Onticket_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_id = value;
					this.SendPropertyChanged("ticket_id");
					this.Onticket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screen_id", DbType="Int NOT NULL")]
		public int screen_id
		{
			get
			{
				return this._screen_id;
			}
			set
			{
				if ((this._screen_id != value))
				{
					if (this._screening.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onscreen_idChanging(value);
					this.SendPropertyChanging();
					this._screen_id = value;
					this.SendPropertyChanged("screen_id");
					this.Onscreen_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", DbType="Int NOT NULL")]
		public int seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					if (this._seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="screening_ticket", Storage="_screening", ThisKey="screen_id", OtherKey="screening_id", IsForeignKey=true)]
		public screening screening
		{
			get
			{
				return this._screening.Entity;
			}
			set
			{
				screening previousValue = this._screening.Entity;
				if (((previousValue != value) 
							|| (this._screening.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._screening.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._screening.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._screen_id = value.screening_id;
					}
					else
					{
						this._screen_id = default(int);
					}
					this.SendPropertyChanged("screening");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seat_ticket", Storage="_seat", ThisKey="seat_id", OtherKey="seat_id", IsForeignKey=true)]
		public seat seat
		{
			get
			{
				return this._seat.Entity;
			}
			set
			{
				seat previousValue = this._seat.Entity;
				if (((previousValue != value) 
							|| (this._seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._seat.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._seat.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._seat_id = value.seat_id;
					}
					else
					{
						this._seat_id = default(int);
					}
					this.SendPropertyChanged("seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_ticket", Storage="_user", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _user1;
		
		private string _pass;
		
		private string _email;
		
		private string _first_name;
		
		private string _last_name;
		
		private bool _admin;
		
		private EntitySet<ticket> _tickets;
		
		private EntityRef<preset> _preset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser1Changing(string value);
    partial void Onuser1Changed();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnadminChanging(bool value);
    partial void OnadminChanged();
    #endregion
		
		public user()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			this._preset = default(EntityRef<preset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._preset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user1", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string user1
		{
			get
			{
				return this._user1;
			}
			set
			{
				if ((this._user1 != value))
				{
					this.Onuser1Changing(value);
					this.SendPropertyChanging();
					this._user1 = value;
					this.SendPropertyChanged("user1");
					this.Onuser1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit NOT NULL")]
		public bool admin
		{
			get
			{
				return this._admin;
			}
			set
			{
				if ((this._admin != value))
				{
					this.OnadminChanging(value);
					this.SendPropertyChanging();
					this._admin = value;
					this.SendPropertyChanged("admin");
					this.OnadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_ticket", Storage="_tickets", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="preset_user", Storage="_preset", ThisKey="user_id", OtherKey="userid", IsForeignKey=true)]
		public preset preset
		{
			get
			{
				return this._preset.Entity;
			}
			set
			{
				preset previousValue = this._preset.Entity;
				if (((previousValue != value) 
							|| (this._preset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._preset.Entity = null;
						previousValue.users.Remove(this);
					}
					this._preset.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._user_id = value.userid;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("preset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.preset")]
	public partial class preset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _timestamp;
		
		private System.Guid _code;
		
		private int _userid;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntimestampChanging(System.DateTime value);
    partial void OntimestampChanged();
    partial void OncodeChanging(System.Guid value);
    partial void OncodeChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    #endregion
		
		public preset()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="preset_user", Storage="_users", ThisKey="userid", OtherKey="user_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.preset = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.preset = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movie")]
	public partial class movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movie_id;
		
		private string _title;
		
		private string _genre;
		
		private string _overview;
		
		private System.DateTime _release_date;
		
		private int _duration;
		
		private string _poster;
		
		private string _images;
		
		private string _videos;
		
		private string _backdrop;
		
		private System.Nullable<double> _vote_average;
		
		private System.Nullable<long> _budget;
		
		private string _cast;
		
		private EntitySet<screening> _screenings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OngenreChanging(string value);
    partial void OngenreChanged();
    partial void OnoverviewChanging(string value);
    partial void OnoverviewChanged();
    partial void Onrelease_dateChanging(System.DateTime value);
    partial void Onrelease_dateChanged();
    partial void OndurationChanging(int value);
    partial void OndurationChanged();
    partial void OnposterChanging(string value);
    partial void OnposterChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    partial void OnvideosChanging(string value);
    partial void OnvideosChanged();
    partial void OnbackdropChanging(string value);
    partial void OnbackdropChanged();
    partial void Onvote_averageChanging(System.Nullable<double> value);
    partial void Onvote_averageChanged();
    partial void OnbudgetChanging(System.Nullable<long> value);
    partial void OnbudgetChanged();
    partial void OncastChanging(string value);
    partial void OncastChanged();
    #endregion
		
		public movie()
		{
			this._screenings = new EntitySet<screening>(new Action<screening>(this.attach_screenings), new Action<screening>(this.detach_screenings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movie_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string genre
		{
			get
			{
				return this._genre;
			}
			set
			{
				if ((this._genre != value))
				{
					this.OngenreChanging(value);
					this.SendPropertyChanging();
					this._genre = value;
					this.SendPropertyChanged("genre");
					this.OngenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_overview", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string overview
		{
			get
			{
				return this._overview;
			}
			set
			{
				if ((this._overview != value))
				{
					this.OnoverviewChanging(value);
					this.SendPropertyChanging();
					this._overview = value;
					this.SendPropertyChanged("overview");
					this.OnoverviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release_date", DbType="DateTime NOT NULL")]
		public System.DateTime release_date
		{
			get
			{
				return this._release_date;
			}
			set
			{
				if ((this._release_date != value))
				{
					this.Onrelease_dateChanging(value);
					this.SendPropertyChanging();
					this._release_date = value;
					this.SendPropertyChanged("release_date");
					this.Onrelease_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int NOT NULL")]
		public int duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_poster", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string poster
		{
			get
			{
				return this._poster;
			}
			set
			{
				if ((this._poster != value))
				{
					this.OnposterChanging(value);
					this.SendPropertyChanging();
					this._poster = value;
					this.SendPropertyChanged("poster");
					this.OnposterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this.OnimagesChanging(value);
					this.SendPropertyChanging();
					this._images = value;
					this.SendPropertyChanged("images");
					this.OnimagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videos", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string videos
		{
			get
			{
				return this._videos;
			}
			set
			{
				if ((this._videos != value))
				{
					this.OnvideosChanging(value);
					this.SendPropertyChanging();
					this._videos = value;
					this.SendPropertyChanged("videos");
					this.OnvideosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_backdrop", DbType="VarChar(128)")]
		public string backdrop
		{
			get
			{
				return this._backdrop;
			}
			set
			{
				if ((this._backdrop != value))
				{
					this.OnbackdropChanging(value);
					this.SendPropertyChanging();
					this._backdrop = value;
					this.SendPropertyChanged("backdrop");
					this.OnbackdropChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vote_average", DbType="Float")]
		public System.Nullable<double> vote_average
		{
			get
			{
				return this._vote_average;
			}
			set
			{
				if ((this._vote_average != value))
				{
					this.Onvote_averageChanging(value);
					this.SendPropertyChanging();
					this._vote_average = value;
					this.SendPropertyChanged("vote_average");
					this.Onvote_averageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_budget", DbType="BigInt")]
		public System.Nullable<long> budget
		{
			get
			{
				return this._budget;
			}
			set
			{
				if ((this._budget != value))
				{
					this.OnbudgetChanging(value);
					this.SendPropertyChanging();
					this._budget = value;
					this.SendPropertyChanged("budget");
					this.OnbudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cast", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string cast
		{
			get
			{
				return this._cast;
			}
			set
			{
				if ((this._cast != value))
				{
					this.OncastChanging(value);
					this.SendPropertyChanging();
					this._cast = value;
					this.SendPropertyChanged("cast");
					this.OncastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie1_screening", Storage="_screenings", ThisKey="movie_id", OtherKey="movie_id")]
		public EntitySet<screening> screenings
		{
			get
			{
				return this._screenings;
			}
			set
			{
				this._screenings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_screenings(screening entity)
		{
			this.SendPropertyChanging();
			entity.movie = this;
		}
		
		private void detach_screenings(screening entity)
		{
			this.SendPropertyChanging();
			entity.movie = null;
		}
	}
}
#pragma warning restore 1591
